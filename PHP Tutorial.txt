PHP HyperText Preprocessor
-process and email contact forms
-upload files from online forms
-generate thumbnails from larger images
-watermark images

-read and write files
-communicate with a database MySql

-and much more....

Client
s/r
Web server
s/r 
PHP engine
s/s Database

Embedded language in HTMP markup
--PHP code remains in the server and will not show up on the Client

suggest XAMPP on windows

Script editor ****
PHP syntax checking
PHP syntax coloring
PHP code hints
Line numbering
A "brace balancing" feature

suggest
Among the free offerings, PHP development tools, PDT, and Komodo Edit, are good.
www.eclipse.org/pdt
www.activestate.com/komodo-edit

www,adobe.com/products/dreamweaver he will use



=======================Checking the PHP configuration
server root

XAMPP
c:\xampp\htdocs 
 
  in here create introducingphp and setup folder then
 now create a file called config.php
 with only one line
<?php phpinfo(); ?>

 can see it in browser like this http://localhost/introducingphp/setup/config.php
 
 1) see php version at top
 2) Core section
 --display_errors should be on for local running but off for live version for security
 --error_reporting   should be at least 32767
 --magic_quotes_gpc  is not longer used
 
 ==============================Changing configuration settings
 in php.ini
 magic_quotes_gpc=Off should match the setting on the remote server (most likely is Off)
 
 error_reporting=E_ALL & ~E_DEPRECATED & ~E_STRICT
 on a MAC he set it to this
 error_reporting=E_ALL | E_STRICT   this gets the value set to 32767
 





===============***************************************************************=============
===============***************************************************************============= 
 ===============***** Chapter 2 PHP Basics ******============
===============***************************************************************=============
===============***************************************************************=============


 =======================PHP: The big picture
 --must be processed and stored in the server root 
 --.php 
 -- PHP enclose in tags  <?php  ?>
 Common Features
    variables
	arrays
	conditional
	loops
	functions and objects
Must be processed by  the server so do not see PHP
Always view the page using a URL  http://localhost...
 
========================Naming variables
rules
   Name
   Total 
   
   Always begins with $ 
   next no number
   only _ allowed
   no spaces 
   are case sensitive 
   
   **** 
   $this is reserved
   do not use the following http://www.php.net/manual/en/reserved.php 
   
  use camel case or _  eg $firstName or $first_name 
  
========================Displaying text and numbers
$firstName = 'Rick';
$firstName = 'Rick';
$total = 56;
echo $firstName;
print $firstName;

Echo can do more variables with commas
echo $firstName, $total;

<?php 
$firstName = 'Rick';
$total = 56;
echo $firstName, $total;
print $firstName;
?>

========================Comments and whitespace
<?php
// This is a comment that will be ignored by php 
# This is also a comment 
$firstName = 'David'; //This ia a single line comment
$lastName = 'Sring'; #comment
/* This ia a multiple line commentIs takes 
   on until */
   
   echo $firstName;
   echo ' ';
   echo $lastName;
========================Storing text as strings
single and double quotes
<?php
$book = "Hitchhiker's Guide to the Galaxy";
$book = 'Hitchhiker\'s Guide to the Galaxy';
$book = '"Hitchhiker\'s Guide to the Galaxy"';
echo 'I love $book';
echo ".....I love $book";

Escape Chars
\"
\n
\r carriage return
\t 
\\
\$ 
\{ 
\}
\[
\]
========================Joining strings 
Concat uses . period
$newLines = "\r\n\r\n";

$fullName = $firstName . ' ' . $lastName;
//echo $fullName . '<br>';

// Variables are processed in a double-quoted string
$recommendation = "$book by $author";
//echo $recommendation;

$message = "Name: $fullName $newLines";
$message .= "Recommendation: $recommendation $newLines";
$message .= "Times listened: $timesListened";
echo $message;


=========================
<!DOCTYPE HTML>
<html>
<head>
<meta charset="utf-8">
<title><?= $fullName; ?> Recommends</title>     // see ?=
</head>
========================Doing calculations with PHP 
+ 
-
*
/
%  MODULO DIVISION 5%2 = 1 THE REMAINDER
++  ADD 1
--  SUBTRACT ONE
   eg 
   $number = 5;
   $result = ++$number +2;  //is 8
   vs
   $result = $number++ +2;
   
others
+=  $a += $b is $a = $a + $balancing

========================Storing multiple values in arrays
$charactersBook = array('Simba', 'r2d2', 'Ford PRefect', 'Zephod Beelebrox');
//echo $charactersBook; //does not work
print_r($charactersBook);
echo '<br>';
echo $charactersBook[1];
$charactersBook[] = 'Marvin'; 
$charactersBook[] = 'Slartilbartfartfast';
echo '<br>';
print_r($charactersBook); echo '<br><br>';

//associative array 
//key value
$descriptions = array('Earth' => 'mostly harnless',
						'Marvin' => 'the paranoid android');
//add more
$descriptions['Zephod'] = 'Presidend ofthe Imperial Galactic Government';
print_r($descriptions);
// echo "Earth is described as $descriptions['Earth']";  //not good 
//need curly brackets for this
echo '<br><br>';
echo "Earth is described as {$descriptions['Earth']}";




===============***************************************************************=============
===============***************************************************************=============
 ===============***** Chapter 3 Using Control Structures and Loops ******============
===============***************************************************************=============
===============***************************************************************=============


==================================== The truth according to PHP
True or False Booleans
Explicit true or false TRUE FaLsE
vs

 Implicit
 PHP regard the following values as FALSE 
 -the keywords false and null
 -zero as a number or string (0, 0.0. '0')
 -an empty string ('', "")
 -An empty array-a Simple XML object created from empty tags

 everything else is Implicitly True 
 -1 is true
 $OK = 'false';   //OK is true since it is a string 
 
==================================== Making decisions with conditions and comparisons
if (condition is true) { do something}  //no ; needed

if (condition is true) { do something} 
else {do this}

if (condition is true) { do something} 
elseif (second condition) {do this}
else {do this}

Comparison Operators
== Both are equal
!=
=== Both are identical
!== The values are not identical
>   The left value is greate than the right one>=
<
<=

=====================
Logical Operators 
&&  $a && $b  true if both are true
||  $a || $b  true if either are true
!   !$a       true is $a is false 


==================================== Using switch statements and the ternary operator
switch ($var) 
{
	case value1:
		do this;
		break;
	case value2:
	case value3
		do this;
		break;
	case value4:
		do this;
		break;
	default:
		do this;
}

same as if else and elseif 

see switch.php

==============
Ternary Operator
$var = (condition) ? value if true : value if false; 

==================================== Using loops for repetitive actions
While Looping
while (condition) {
//code to be executed
}

do { 
//code to be executed 
} while (condition);


For Looping
for (initialize; condition; increment)
{
//code to be executed
}
==================================== Looping through the contents of an array
For Each loops
foreach ($array_name as $value) {
	//do something with $value 
}

Accessing Arrays    Keys and Values
foreach ($array_name as $key => $value) {
	//do something wtih $key and $value 
}




===============***************************************************************=============
===============***************************************************************=============
 ===============***** Chapter 4 Functions, Objects, and Errors ******============
===============***************************************************************=============
===============***************************************************************=============


==================================== Using the built-in functions of PHP
phpversion();  all return a value which you can use or not 
echo phpversion(); 
$version phpversion(); 

most functions require values 
$name = 'RICK';
echo strtolower($name) . '<br>' . $name;

$name = ucfirst(strtolower($name));
echo $name; 

==============================
$input = '<p>Hi, <script>alert("Boo!");</script><a href="http://www.example.com/">visit my site</a>.</p>';

// strip_tags() takes either one or two arguments.
// The second, optional argument consists of a string containing tags you want to preserve.
echo strip_tags($input);
echo strip_tags($input, '<p><a>');

NOTE: <script> is JAVASCRIPT
==============================
// Ths sort() and rsort() functions change the original value of the array passed to them as an argument.
see built-in3.php 

==================================== Understanding PHP documentation

 www.php.net/manual/en/
 
 start with the function reference **** 
 See:
 Text Processing : Strings
 Variable and Type Related Extensions : Arrays 
 
 
 NOTES:
 bool sort (array &$array [, int $sort_flags = SORT-REGULAR])  
								NOTE:// & before $array means it changes $array the input variable
								
==================================== Creating custom functions

function name($parameter1, $parameter1, etc) {
	//do commands in here and can do stuff with parameters 
	return "$minutes:$seconds";
}

NOTE: return keyword is critical

NOTE: if function is in another file you need to do an include(before function call) 
in the files where that function is used.

==================================== Including external files
Serve-side Includes
	Files are merged gy the server 
	External files can contain PHP, HTML, or both 
	Code libraries
	Common page elements 

include 
include_once 
require 
require_once 
 
 see include.php and paragraph.html
 <?php include_once './includes/paragraph.html'; ?>
 <?php include './includes/paragraph.html'; ?>
 
 See require.php 
 <?php require './includes/paragraph.html'; ?>
 NOTE: if the file is missing then a fatal error will occur and it will not render the page 
 NOTE: require_once will only include it  once. If you have require 2 times for the same file it will fail.

==================================== Passing values by reference to a function
Change the original value 

$number = 2;
function doubleIt($num){ reutrn numbe*= 2;}
$doubled = doubleIt($number); 

// pass by reference   NOTE &
function doubleIt(&$num) {
	$num *= 2;
}
==================================== Understanding PHP classes and objects
OOP
PHP is not an object oriented language. But it does have considerable support 
for object oriented programming. 

And object is a sophisticated data type that can store and manipulate values. Its 
characteristics are defined by a collection of functions and variables, collectively 
known as a class. Among PHP's built in classes. The DateTime, and DateTimeZone 
classes are particularly useful. 

http://php.net/manual/en/class.datetime.php 

The purpose of this video is to explain how to create an instance of a class. To 
create an object and how to access it's methods. 

$now = new DateTime();     // use new to create an object
$now->setTimezone($dallas); // -> for accessing function of class 

One last point major changes were made to objects in classes in PHP five. Making them 
incompatible with older versions of PHP. Don't use classes or objects that were 
designed for PHP four.

==================================== Deciphering error messages

Errors are an inescapable fact of a programmer life. Unfortunately, PHPs error 
messages aren't always easy to understand. So, in this video I've gathered together 
a bunch of files that contain some of the most common errors. I'll show you how to 
interpret the error messages and hunt down the problem. This is probably the most 
common error message that you'll come across. It says that it's a syntax error and 
there's an unexpected curly brace, and it says it's happening there on line 22.

There are 7 files with errors 
1) error-semicolon   most common type of error
2) error_missing-brace  
3) error_encapsed
<p><?php echo "In the revised version of the Hitchhiker's Guide, Earth is 
  described as $descriptions['Earth']."; ?></p>
  NOTE need {} around an array 
  <p><?php echo "In the revised version of the Hitchhiker's Guide, Earth is 
  described as {$descriptions['Earth']}."; ?></p>
4) error_undefined-index
    ehco and earth wrong 
5) redirect to another page clicking a link
   the error did not happen. It must be something fixed in PHP.
6) error_double-colon  (T_PAAMAYIM_NEKUDOTAYIM)

==================================== 
  
  
  
  
  
===============***************************************************************=============
===============***************************************************************=============
 ===============***** Chapter 5 Emailing the Contents of an Online Form ******============
===============***************************************************************=============
===============***************************************************************=============
==================================== Understanding the difference between POST and GET

see form.php
What happens to the data in an online form depends on whether it's submitted using the post or 
get method. In this video, I explain the difference between the two methods and introduce you 
to three of PHP's superglobal arrays. By default, forms are submitted using the get method. 
But its common practice to specify which method you want to use by adding the method attribute 
to the opening form tag. In this particular case, I've set it explicitly to get. The action 
attribute tells the browser where to send the data for processing. Usually, this is the 
address of a script that checks the data and then handles it in some way or another, such as, 
emailing it or inserting it into a database. My preference is to add the processing script in 
a conditional statement above the doc type and create what's known as a self processing form. 
The reason for doing this is that it makes it easy to redisplay the form if there are any errors.


Leaving the action attribute empty, results in the page reloading. And that's valid in HTML4 
but not in HTML5, which requires a value for the action attribute. You could just type in the 
name of the page that the form is in. But PHP has a useful preset variable that you can use 
instead. Let's just add that. PHP echo and then the name of the variable is, begins with an 
underscore and its server. And then, the name of the array key is PHP_SELF, all in uppercase. 
So, this automatically inserts the name of the current page into the action attribute turning 
this into a self processing form. Server or underscore server is one of PHP's super global arrays 
that are always available in any script, and the names of the super globals are always in uppercase.

And with one exception, they all begin with an underscore. 


add a php between the pre and pre tagas at the botton

PHP treats an empty array as being false, so if the get array contains nothing this part of code will be ignored. 
if ($_GET) {
	echo "Contents of the $_GET array; <br>";
	print_r($_GET)
} elseif ($_POST) {
	echo "Contents of the $_POST array; <br>";
	print_r($_POST)
}

The contents of the get array are down here and the array keys are taken from the name attributes of 
each form element.

So, name is name, name is email, and name comments and also from the submit button, that name is 
sent as well. And the values is the data that I submitted through the form. 


So, the post and get super global arrays capture the value submitted by a form using the 
post and get methods respectively.
The name attributes of each form element is used as the array key. 

NOTE: $_POST does not put the array details in the URL. $_GET does so could use this for searches
POST would be for sending email or posting to a database

So, the post and get super global arrays capture the value submitted by a form using the post and get methods respectively.
<form name="contact" method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
<form name="contact" method="get" action="<?php echo $_SERVER['PHP_SELF']; ?>">

The name attributes of each form element is used as the array key. In addition to data submitted by a form, 
the get array captures any name value pairs appended to the URL as a query string. As a general rule, the get
 method should be used only for search forms because data is exposed in the URL, and can be bookmarked. Use the 
 post method for sending emails or for inserting records into a database.

==================================== Eliminating unwanted backslashes
Magic Quotes
study this 

Often when processing a form with PHP, you end up with mysterious backslashes peppered throughout the date. 
They're caused by Magic Quotes, a feature that was added to PHP many years ago with the intention of making 
life easier for beginners. It was a well intentioned move but it created more problems than it solved. And 
as this page in the online manual indicates, this feature has been deprecated and will eventually be removed. 

I strongly recommend that you study this section in the online manual which is at 
www.php.net/manual/en/security.magicquotes.php.

You want magic quotes turned off. Otherewise strings with ' or " in them are preceeded by \ backslashes

phpinfo  magic_quotes_gpc   change it to Off 

create a text file with this 
php_flags magic_quotes_gpc Off  save it in the site root as .htaccess
This only works on Apache.
Otherwise need this file remove_quotes.php  and add it to the page beginning with a require command


The most efficient way to deal with it is to use this ht access command in the site route. But that works 
only on an Apache server. If you can't do that, then use remove quotes PHP and include it at the beginning 
of every page that processes data from a form.


==================================== How PHP sends email
$to = 'Dick Maclean <Rick_maclean@sil.org>,  maclean75116@msn.com';
$subject = 'subject without new line chars';
$body = 'This is a single string concatenated all together to send to the email funtion';

mail($to, $subject, $body);

more
$headers = "From: webmaster@exmaple.com\r\n";
$headers .= "Content-Type: text/plain; charset-utf-8\r\n";
$headers .= "Cc: myfriend@example.com";
mail($to, $subject, $body, $header);

more to prevent spam
mail($to, $subject, $body, $header, '-maclean75116@msn.com');  //my email address

SEE mail.php

get success
$success = mail($to, $subject, $body, $header, '-maclean75116@msn.com'); 
NOTE: need to communicate with a mail server.
success could be true but the transport agent needs to do it so success = TRUE does not 


==================================== Displaying error messages conditionally
see: C:\xampp\htdocs\introducingphp\ch5\error_messages  before and after

<?php
$errors = array();
$missing = array();
?>

Check if the arrays have any missing values in them.
<?php if ($errors || $missing) { ?>
<p class="warning">Please fix the item(s) indicated.</p>
<?php }?>
NOTE: when the if statement is false then the html will not be displayed.

	<?php if ($missing && in_array('name', $missing)) { ?>
        <span class="warning">Please enter your name</span>
    <?php } ?>
	
NOTE: we cannot see the messages yet because we need the processing of the the form before these will show up.
You won't be able to test that until the processing script has been added and that's the subject of another video.

see next one for this
==================================== Making sure required fields aren't blank
if (isset($_POST['send'])) {
	 //Any code that comes between these curly braces will be executed only after the form has been submitted. 
}


To handle this he created a separate file to handle these things
mail_process.php 
<?php
foreach ($_POST as $key => $value) {
	$temp = is_array($value) ? $value : trim($value);  //note trim will not work if $value is an array so do ternary 
	if (empty($temp) && in_array($key, $required)) {   //is the value empty $temp and in the $required array 
		$missing[] = $key;								//if true add to $missing
		$$key = '';
	} elseif(in_array($key, $expected)) {
		$$key = $temp;
	}
}

NOTE: 
Before adding the code, I want to explain what it is that I want to do, because just looking at the 
code itself might be difficult to understand. What I want to do is to convert the post variables

Converting $_POST variables 
$_POST['name'] 
$_POST['email'] 
$_POST['comments'] 
 
and store their values in simpler variables like this. 
$name 
$email 
$comments 

The way I'm going to do it is by using a php construction known as variable variables. 
Lets say I've got a variable called Key, and its value is name.
$key = 'name';
$$key = 'David'; //create a new variable which is called 'name' and assign 'David' to it. Redirection??
To create a variable variable, I precede the original variable,. With another dollar sign, and then 
assign it a value, and the result is this.  
$name = 'David'; 

It creates a new variable using the original name. So if key is email, it will create a new variable called email, 
and if key is comments, it will also create a new variable called comments. 


There's a lot more to do to this script, but by looping through the post array and checking whether 
required fields have been filled in, you can display error messages.

==================================== Preserving user input when a form is incomplete
		<?php
		if ($errors || $missing) {
			echo 'value="' . htmlentities($email, ENT_COMPAT, 'utf-8') . '"'; //note this handles double quotes
																			//also need change to utf-8
		}
		?>

		As a courtesy to your site's visitors it's a good idea to preserve user input when 
		an error is detected. Since the content of each field is in the post array, it's 
		easy to redisplay... But you need to be careful when injecting unknown values into 
		your HTML. The script in mail process PHP takes each element in the post array and 
		reassigns it to a new variable based on the key name.

So the content of the name field is assigned to a variable called name. The content of the email 
field is assigned to a variable called Email, and so on.


NOTE for text area needs to be a bit different
		<textarea name="comments" id="comments"><?php 
		if ($errors || $missing) {
			echo htmlentities($comments, ENT_COMPAT, 'utf-8');
		}
		?></textarea>
		
		
So, that's how you preserve user input when a form is submitted with errors before redisplaying values 
passed through the post array you need to pass them to the HTML entities function. When used with 
only one argument the function defaults to Western European encoding and corrupts accented characters. 
By adding ENT_COMPAT as the second argument, and a string containing UTF-8 as the third argument, 
HTML entities supports not only accented characters, but also Chinese, Japanese and other scripts.

==================================== Blocking suspect phrases
Online forms are a target for spammers looking for vulnerabilities in the processing script. The 
most common attack is known as email header injection, in which the spammer attempts to trick 
your form into sending HTML email with copies to many people. In this video, I'll create a function 
designed to block such attacks.

NOTE:
mail_process.php is changed
form.php is changed

Note this change in form.php
<?php if ($_POST && $suspect) { ?>
<p class="warning">Sorry your mail could not be be sent.</p>
<?php } elseif ($errors || $missing) { ?>
<p class="warning">Please fix the item(s) indicated.</p>
<?php }?> 

==================================== Adding headers and automating the reply address
In this video, I'm going to show you how to add additional headers to the mail processing script. One 
of the most popularl uses of email headers. Is to incorporate the user's email address into a reply to 
header. Because it enables you to reply directly to incoming messages By clicking the Reply button in your 
email program. However, this can easily expose your form to an email header injection attack, so I'll 
show you how to do it safely. Most headers, are likely to be specific to a particular form. So, I'm 
going to start off by adding the additional headers just before I include the mail processing script.

Added this in the form.php
    $headers = "From: webmaster@example.com\r\n";
	$headers .= "Content-type: text/plain; charset=utf-8";
	

Puting in the reply-To header in the php script mailprocess.php
see below //from POST (INPUT_POST) array  field is email and validate function

if (!$suspect && !empty($email)) {
	$validemail = filter_input(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);  
	if ($validemail) {
		$headers .= "\r\nReply-to: $validemail";   //need line feed after last header line
	} else {
		$errors['email'] = true;      //create an element in the errors array and set it to true
	}
}

now in form.php we have this
(isset($errors['email'])

and add a span as follows 
<span class="warning">Invalid email address</span> 

also added email to required 
$required = array('name', 'email', 'comments');


 ==================================== Building the message body 
 
 
 
 
 ==================================== Sending the email
 ==================================== 
 ==================================== 
 ==================================== 
 ==================================== 
 ==================================== 
   
   
   
   
   
   
   
   
   
===============***************************************************************=============
===============***************************************************************=============
 ===============***** Chapter 6 Dealing with Multiple-Choise Form Fields ******============
===============***************************************************************=============
===============***************************************************************=============

==================================== Handling radio button groups
==================================== Handling single checkboxes
==================================== Handling checkbox groups
==================================== Handling select menus
==================================== Handling multiple-choice lists
==================================== 
==================================== 
==================================== 
 
 
 